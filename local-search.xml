<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2208-程序计时方法</title>
    <link href="/2022/08/04/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%97%B6%E6%96%B9%E6%B3%95/"/>
    <url>/2022/08/04/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%97%B6%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>常用的程序计时方法，总结来自师兄</p><span id="more"></span><h3 id="方法1：time"><a href="#方法1：time" class="headerlink" title="方法1：time"></a>方法1：time</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">time_t</span> tm_now;<br><br>    time(&amp;tm_now);<br><br>    <span class="hljs-comment">// 1970-1-1,00:00:00到现在的秒数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;now time is %ld second\\n&quot;</span>, tm_now);<br><br>    <span class="hljs-comment">// 转换成本地时间，精确到秒</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span> *<span class="hljs-title">p_local_tm</span> ;</span><br>    p_local_tm = localtime(&amp;tm_now) ;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;now datetime: %04d-%02d-%02d %02d:%02d:%02d\\n&quot;</span>,<br>        p_local_tm-&gt;tm_year+<span class="hljs-number">1900</span>,<br>        p_local_tm-&gt;tm_mon+<span class="hljs-number">1</span>,<br>        p_local_tm-&gt;tm_mday,<br>        p_local_tm-&gt;tm_hour,<br>        p_local_tm-&gt;tm_min,<br>        p_local_tm-&gt;tm_sec);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法2：gettimeofday"><a href="#方法2：gettimeofday" class="headerlink" title="方法2：gettimeofday"></a>方法2：gettimeofday</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tm_now</span>;</span><br><br>    <span class="hljs-comment">// 获取当前时间戳(tv_sec, tv_usec)</span><br>    gettimeofday(&amp;tm_now,<span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 第二个参数是时区</span><br><br>    <span class="hljs-comment">// 转换成本地时间，精确到秒</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span> *<span class="hljs-title">p_local_tm</span>;</span><br>    p_local_tm = localtime(&amp;tm_now.tv_sec) ;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;now datetime: %04d-%02d-%02d %02d:%02d:%02d.%06ld\\n&quot;</span>,<br>        p_local_tm-&gt;tm_year+<span class="hljs-number">1900</span>,<br>        p_local_tm-&gt;tm_mon+<span class="hljs-number">1</span>,<br>        p_local_tm-&gt;tm_mday,<br>        p_local_tm-&gt;tm_hour,<br>        p_local_tm-&gt;tm_min,<br>        p_local_tm-&gt;tm_sec,<br>        tm_now.tv_usec); <span class="hljs-comment">// 有微秒时间戳了</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法3：clock-gettime"><a href="#方法3：clock-gettime" class="headerlink" title="方法3：clock_gettime"></a>方法3：clock_gettime</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_timestamp</span><span class="hljs-params">(<span class="hljs-type">int</span> use_monotonic)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">tm_now</span>;</span><br><br>    <span class="hljs-comment">// 获取当前时间戳(tv_sec, tv_usec)</span><br>    <span class="hljs-keyword">if</span>(use_monotonic)<br>        clock_gettime(CLOCK_MONOTONIC, &amp;tm_now);<br>        <span class="hljs-comment">// 单调时间，屏蔽手动修改时间</span><br>    <span class="hljs-keyword">else</span><br>        clock_gettime(CLOCK_REALTIME, &amp;tm_now);<br>        <span class="hljs-comment">// 机器时间</span><br><br>    <span class="hljs-comment">// 转换成本地时间，精确到秒</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span> *<span class="hljs-title">p_local_tm</span>;</span><br>    p_local_tm = localtime(&amp;tm_now.tv_sec) ;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;now datetime: %04d-%02d-%02d %02d:%02d:%02d.%09ld\\n&quot;</span>,<br>        p_local_tm-&gt;tm_year+<span class="hljs-number">1900</span>,<br>        p_local_tm-&gt;tm_mon+<span class="hljs-number">1</span>,<br>        p_local_tm-&gt;tm_mday,<br>        p_local_tm-&gt;tm_hour,<br>        p_local_tm-&gt;tm_min,<br>        p_local_tm-&gt;tm_sec,<br>        tm_now.tv_nsec);<br>        <span class="hljs-comment">// 纳秒时间</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法4：chrono库"><a href="#方法4：chrono库" class="headerlink" title="方法4：chrono库"></a>方法4：chrono库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-keyword">auto</span> start = <span class="hljs-built_in">std</span>::chrono::system_clock::now();<br><br>...<br><br><span class="hljs-keyword">auto</span> end = <span class="hljs-built_in">std</span>::chrono::system_clock::now();<br><span class="hljs-built_in">std</span>::chrono::duration&lt;<span class="hljs-type">double</span>&gt; elapsed_seconds = end - start;<br>time1 = elapsed_seconds.count();<br></code></pre></td></tr></table></figure><h3 id="方法5：rdtsc"><a href="#方法5：rdtsc" class="headerlink" title="方法5：rdtsc"></a>方法5：rdtsc</h3><p>最精准也是最难用的方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">get_tsc</span><span class="hljs-params">()</span> <span class="hljs-comment">// Time Stamp Counter寄存器</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __i386__</span><br>    <span class="hljs-type">uint64_t</span> x;<br>    __asm__ <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;rdtsc&quot;</span> : <span class="hljs-string">&quot;=A&quot;</span>(x))</span>;<br>    <span class="hljs-keyword">return</span> x;<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(__amd64__) || defined(__x86_64__)</span><br>    <span class="hljs-type">uint64_t</span> a, d;<br>    __asm__ <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;rdtsc&quot;</span> : <span class="hljs-string">&quot;=a&quot;</span>(a), <span class="hljs-string">&quot;=d&quot;</span>(d))</span>;<br>    <span class="hljs-keyword">return</span> (d &lt;&lt; <span class="hljs-number">32</span>) | a;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">// ARM架构</span></span><br>    <span class="hljs-type">uint32_t</span> cc = <span class="hljs-number">0</span>;<br>    __asm__ <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;mrc p15, 0, %0, c9, c13, 0&quot;</span>:<span class="hljs-string">&quot;=r&quot;</span> (cc))</span>;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">uint64_t</span>)cc;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用限制：</p><ol><li>机器需要有constant_tsc的特性，使用：<code>cat /proc/cpu_info | grep constant_tsc</code> 命令可以确定是否有该特性</li><li>乱序执行核能会打乱时钟周期的测量，必要时需要制造“依赖指令”去避免乱序执行</li><li>必要时需要使用<code>memory barrier</code></li><li><code>cat /proc/cpuinfo | grep rdtscp</code> 如果开启，可以使用rdtscp，更精准一点。使用方法基本一致：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">get_tscp</span><span class="hljs-params">()</span> &#123; <span class="hljs-type">uint64_t</span> a, d; __asm__ <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;rdtscp&quot;</span> : <span class="hljs-string">&quot;=a&quot;</span>(a), <span class="hljs-string">&quot;=d&quot;</span>(d))</span>; <span class="hljs-keyword">return</span> (d &lt;&lt; <span class="hljs-number">32</span>) | a; &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>如果使用C++，那么使用<code>chrono</code>库是最好的选择，相信STL不会翻大车</li><li>如果机器有<code>constant tsc</code>特性，那么可以使用rdtsc方法</li><li>如果没有，那么使用<code>gettimeofday</code>时一个比较稳定的方法</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>计时</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2208-LLVM笔记</title>
    <link href="/2022/08/03/LLVM%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/03/LLVM%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>待更新</p><span id="more"></span><h1 id="安装LLVM"><a href="#安装LLVM" class="headerlink" title="安装LLVM"></a>安装LLVM</h1>]]></content>
    
    
    
    <tags>
      
      <tag>LLVM</tag>
      
      <tag>编译器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2208-CMake笔记</title>
    <link href="/2022/08/02/CMake%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/02/CMake%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>待更新</p><span id="more"></span><h3 id="CMake简介"><a href="#CMake简介" class="headerlink" title="CMake简介"></a>CMake简介</h3><!-- more --><p>CMake是一个构建生成器， 提供了强大的领域特定语言(DSL)来描述构建系统应该实现的功能。 这是CMake的主要优势之一， 它允许使用相同的CMake脚本集生成平台原生构建系统。CMake软件工具集， 使开发人员可以完全控制给定项目的生命周期：</p><ul><li>CMake是描述如何在所有主要硬件和操作系统上配置、 构建和安装项目， 无<br>论是构建可执行文件、 库， 还是两者都要构建</li><li>CTest定义测试、 测试套件， 并设置应该如何执行。</li><li>CPack为打包需求提供了DSL。</li><li>CDash将项目的测试结果在面板中展示</li></ul><p>CMake管理的项目的工作流发生在许多阶段(time)，称之为时序。<br><img src="/2022/08/02/CMake%E7%AC%94%E8%AE%B0/2022-08-02-14-54-57.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2208-TVM对前端模型进行优化的过程分析</title>
    <link href="/2022/07/29/TVM%E5%AF%B9%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E7%9A%84%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <url>/2022/07/29/TVM%E5%AF%B9%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E7%9A%84%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>本文以ResNet-50为例分析TVM在对前端网络模型进行优化时的逻辑。待更新</p><span id="more"></span><!-- more --><h4 id="0-测试代码"><a href="#0-测试代码" class="headerlink" title="0.测试代码"></a>0.测试代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#其他引入包</span><br><span class="hljs-keyword">import</span> onnx     <span class="hljs-comment">#模型前端</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image   <span class="hljs-comment">#图片处理</span><br><span class="hljs-keyword">import</span> timeit       <span class="hljs-comment">#用作计时</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np  <span class="hljs-comment">#模型输入 预处理使用</span><br><span class="hljs-keyword">from</span> scipy.special <span class="hljs-keyword">import</span> softmax  <span class="hljs-comment">#模型输出 后处理使用</span><br><br><span class="hljs-comment">#tvm使用到的包</span><br><span class="hljs-keyword">import</span> tvm  <span class="hljs-comment">#引了本包</span><br><span class="hljs-keyword">from</span> tvm.contrib.download <span class="hljs-keyword">import</span> download_testdata <span class="hljs-comment">#下载测试数据</span><br><span class="hljs-keyword">import</span> tvm.relay <span class="hljs-keyword">as</span> relay       <span class="hljs-comment">#relay 用在tvm编译模型</span><br><span class="hljs-keyword">from</span> tvm.contrib <span class="hljs-keyword">import</span> graph_executor <span class="hljs-comment">#用来生成计算图</span><br><span class="hljs-comment"># import tvm.auto_scheduler as auto_scheduler #自动scheduler 没用到</span><br><span class="hljs-keyword">from</span> tvm.autotvm.tuner <span class="hljs-keyword">import</span> XGBTuner <span class="hljs-comment">#使用默认的XGBoost Grid算法进行tune</span><br><span class="hljs-keyword">from</span> tvm <span class="hljs-keyword">import</span> autotvm <span class="hljs-comment">#引入autotvm 用在tune过程</span><br><br><br><br><span class="hljs-comment">#模型时间计算工具</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">model_time_test</span>(<span class="hljs-params">module</span>):<br>    timing_number = <span class="hljs-number">10</span><br>    timing_repeat = <span class="hljs-number">10</span><br>    result = (<br>        np.array(timeit.Timer(<span class="hljs-keyword">lambda</span>: module.run()).repeat(repeat=timing_repeat, number=timing_number))<br>        * <span class="hljs-number">1000</span><br>        / timing_number<br>    )<br>    result = &#123;<br>        <span class="hljs-string">&quot;mean&quot;</span>: np.mean(result),<br>        <span class="hljs-string">&quot;median&quot;</span>: np.median(result),<br>        <span class="hljs-string">&quot;std&quot;</span>: np.std(result),<br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br><br><br><br><span class="hljs-comment">#1. 模型和样例下载及预处理</span><br><span class="hljs-comment">#1.1 下载onnx模型到本地并加载</span><br>model_url = <span class="hljs-string">&quot;&quot;</span>.join(<br>    [<br>        <span class="hljs-string">&quot;https://github.com/onnx/models/raw/&quot;</span>,<br>        <span class="hljs-string">&quot;b9a54e89508f101a1611cd64f4ef56b9cb62c7cf/vision/classification/resnet/model/&quot;</span>,<br>        <span class="hljs-string">&quot;resnet50-v2-7.onnx&quot;</span>,<br>    ]<br>)<br>model_path = download_testdata(model_url, <span class="hljs-string">&quot;resnet50-v2-7.onnx&quot;</span>, module=<span class="hljs-string">&quot;onnx&quot;</span>)<br>onnx_model = onnx.load(model_path)<br><br><span class="hljs-comment">#1.2 下载图像测试用例 并转换为模型输入的形式</span><br>img_url = <span class="hljs-string">&quot;https://s3.amazonaws.com/model-server/inputs/kitten.jpg&quot;</span><br>img_path = download_testdata(img_url, <span class="hljs-string">&quot;imagenet_cat.png&quot;</span>, module=<span class="hljs-string">&quot;data&quot;</span>)<br><span class="hljs-comment">## resize it to 224*224</span><br>resized_image = Image.<span class="hljs-built_in">open</span>(img_path).resize((<span class="hljs-number">224</span>, <span class="hljs-number">224</span>))<br>img_data = np.asarray(resized_image).astype(<span class="hljs-string">&quot;float32&quot;</span>)<br><span class="hljs-comment">## Our input image is in HWC layout while ONNX expects CHW input, so convert the array</span><br>img_data = np.transpose(img_data, (<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br><span class="hljs-comment">## Normalize according to the ImageNet input specification</span><br>imagenet_mean = np.array([<span class="hljs-number">0.485</span>, <span class="hljs-number">0.456</span>, <span class="hljs-number">0.406</span>]).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>imagenet_stddev = np.array([<span class="hljs-number">0.229</span>, <span class="hljs-number">0.224</span>, <span class="hljs-number">0.225</span>]).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>norm_img_data = (img_data / <span class="hljs-number">255</span> - imagenet_mean) / imagenet_stddev<br><span class="hljs-comment">## Add the batch dimension, as we are expecting 4-dimensional input: NCHW.</span><br>img_data = np.expand_dims(norm_img_data, axis=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#2. 使用relay编译模型(得到计算图模型) 等效于tvmc compiler</span><br><span class="hljs-comment">#2.1 设置后端target</span><br>target = <span class="hljs-string">&quot;llvm -mcpu=broadwell&quot;</span><br><span class="hljs-comment">#2.2  模型输入的名字和尺寸 可以用工具查看(例如netron)</span><br>input_name = <span class="hljs-string">&quot;data&quot;</span><br>shape_dict = &#123;input_name: img_data.shape&#125;<br><span class="hljs-comment">#2.3 选择合适的前端 使用relay编译</span><br>mod, params = relay.frontend.from_onnx(onnx_model, shape_dict)<br><span class="hljs-keyword">with</span> tvm.transform.PassContext(opt_level=<span class="hljs-number">3</span>):<br>    lib = relay.build(mod, target=target, params=params)    <br><span class="hljs-comment">#2.4 生成模型的计算图    </span><br>dev = tvm.device(<span class="hljs-built_in">str</span>(target), <span class="hljs-number">0</span>)<br>module = graph_executor.GraphModule(lib[<span class="hljs-string">&quot;default&quot;</span>](dev))<br><br><span class="hljs-comment">#3. 在tvm运行时的支持下，运行未优化的模型进行推理 等效于tvmc run</span><br><span class="hljs-comment">#3.1 设置模型输入</span><br>dtype = <span class="hljs-string">&quot;float32&quot;</span><br><span class="hljs-comment">## 这里img_data就是1.2中处理过的图片数据</span><br>module.set_input(input_name, img_data)<br><span class="hljs-comment">#3.2 模型运行</span><br>module.run()<br><span class="hljs-comment">#3.3 取得模型输出</span><br>output_shape = (<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)<br>tvm_output = module.get_output(<span class="hljs-number">0</span>, tvm.nd.empty(output_shape)).numpy()<br><span class="hljs-comment">#3.4 计算未优化模型的时间</span><br>unoptimized=model_time_test(module)<br><span class="hljs-comment">#3.5 对模型输出进行后处理 将resNet输出转为更可读的形式</span><br><span class="hljs-comment">## Download a list of labels</span><br>labels_url = <span class="hljs-string">&quot;https://s3.amazonaws.com/onnx-model-zoo/synset.txt&quot;</span><br>labels_path = download_testdata(labels_url, <span class="hljs-string">&quot;synset.txt&quot;</span>, module=<span class="hljs-string">&quot;data&quot;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(labels_path, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    labels = [l.rstrip() <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> f]<br><span class="hljs-comment">## Open the output and read the output tensor</span><br>scores = softmax(tvm_output)<br>scores = np.squeeze(scores)<br>ranks = np.argsort(scores)[::-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> rank <span class="hljs-keyword">in</span> ranks[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;class=&#x27;%s&#x27; with probability=%f&quot;</span> % (labels[rank], scores[rank]))<br><br><br><span class="hljs-comment">#4. 使用tvm对模型进行tune 等效于tvmc tune</span><br><span class="hljs-comment">#4.1 创建runner</span><br><span class="hljs-comment">##设置runner参数</span><br>number = <span class="hljs-number">10</span><br>repeat = <span class="hljs-number">1</span><br>min_repeat_ms = <span class="hljs-number">0</span>  <span class="hljs-comment"># since we&#x27;re tuning on a CPU, can be set to 0</span><br>timeout = <span class="hljs-number">10</span>  <span class="hljs-comment"># in seconds</span><br><span class="hljs-comment">##创建runner</span><br>runner = autotvm.LocalRunner(<br>    number=number,<br>    repeat=repeat,<br>    timeout=timeout,<br>    min_repeat_ms=min_repeat_ms,<br>    enable_cpu_cache_flush=<span class="hljs-literal">True</span>,<br>)<br><span class="hljs-comment">#4.2 设置tuning选项</span><br>tuning_option = &#123;<br>    <span class="hljs-string">&quot;tuner&quot;</span>: <span class="hljs-string">&quot;xgb&quot;</span>,<br>    <span class="hljs-string">&quot;trials&quot;</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-string">&quot;early_stopping&quot;</span>: <span class="hljs-number">100</span>,<br>    <span class="hljs-string">&quot;measure_option&quot;</span>: autotvm.measure_option(<br>        builder=autotvm.LocalBuilder(build_func=<span class="hljs-string">&quot;default&quot;</span>), runner=runner<br>    ),<br>    <span class="hljs-string">&quot;tuning_records&quot;</span>: <span class="hljs-string">&quot;resnet-50-v2-autotuning.json&quot;</span>,<br>&#125;<br><span class="hljs-comment">#4.3 从onnx model中提取task</span><br>tasks = autotvm.task.extract_from_program(mod[<span class="hljs-string">&quot;main&quot;</span>], target=target, params=params)<br><span class="hljs-comment">#4.4 相继对提取的任务进行tune</span><br><span class="hljs-keyword">for</span> i, task <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(tasks):<br>    prefix = <span class="hljs-string">&quot;[Task %2d/%2d] &quot;</span> % (i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(tasks))<br>    tuner_obj = XGBTuner(task, loss_type=<span class="hljs-string">&quot;rank&quot;</span>)<br>    tuner_obj.tune(<br>        n_trial=<span class="hljs-built_in">min</span>(tuning_option[<span class="hljs-string">&quot;trials&quot;</span>], <span class="hljs-built_in">len</span>(task.config_space)),<br>        early_stopping=tuning_option[<span class="hljs-string">&quot;early_stopping&quot;</span>],<br>        measure_option=tuning_option[<span class="hljs-string">&quot;measure_option&quot;</span>],<br>        callbacks=[<br>            autotvm.callback.progress_bar(tuning_option[<span class="hljs-string">&quot;trials&quot;</span>], prefix=prefix),<br>            autotvm.callback.log_to_file(tuning_option[<span class="hljs-string">&quot;tuning_records&quot;</span>]),<br>        ],<br>    )<br><br><span class="hljs-comment">#5. 提取最好的调优数据来编译优化后的模型 等效于tvmc compiler --tuning-records</span><br><span class="hljs-keyword">with</span> autotvm.apply_history_best(tuning_option[<span class="hljs-string">&quot;tuning_records&quot;</span>]):<br>    <span class="hljs-keyword">with</span> tvm.transform.PassContext(opt_level=<span class="hljs-number">3</span>, config=&#123;&#125;):<br>        lib = relay.build(mod, target=target, params=params)<br>dev = tvm.device(<span class="hljs-built_in">str</span>(target), <span class="hljs-number">0</span>)<br>module = graph_executor.GraphModule(lib[<span class="hljs-string">&quot;default&quot;</span>](dev))<br><br><br><span class="hljs-comment">#6. 在tvm运行时下，对优化的模型进行样例推理</span><br>dtype = <span class="hljs-string">&quot;float32&quot;</span><br>module.set_input(input_name, img_data)<br>module.run()<br>output_shape = (<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)<br>tvm_output = module.get_output(<span class="hljs-number">0</span>, tvm.nd.empty(output_shape)).numpy()<br>scores = softmax(tvm_output)<br>scores = np.squeeze(scores)<br>ranks = np.argsort(scores)[::-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> rank <span class="hljs-keyword">in</span> ranks[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;class=&#x27;%s&#x27; with probability=%f&quot;</span> % (labels[rank], scores[rank]))<br><span class="hljs-comment">## 计算优化模型的时间</span><br>optimized=model_time_test(module)<br><br><br><span class="hljs-comment">#7. 输出优化和未优化模型对比</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;optimized: %s&quot;</span> % (optimized))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;unoptimized: %s&quot;</span> % (unoptimized))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>TVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2207-TVM在Ubuntu系统下的安装</title>
    <link href="/2022/07/28/TVM%E5%9C%A8Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2022/07/28/TVM%E5%9C%A8Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>在Ubuntu系统下通过conda环境安装tvm</p><span id="more"></span><p>安装过程主要参看<a href="https://tvm.apache.org/docs/install/from_source.html#developers-get-source-from-github">官方文档</a>，不过那个文档考虑的方面太多了，容易绕晕。这里考虑在conda环境下安装tvm。</p><h4 id="0-服务器环境"><a href="#0-服务器环境" class="headerlink" title="0.服务器环境"></a>0.服务器环境</h4><p>系统：Linux version 5.4.0-107-generic (buildd@lcy02-amd64-058) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1))<br>cpu：Intel(R) Xeon(R) CPU E5-2695 v4 @ 2.10GHz</p><h4 id="1-从GitHub获取源码"><a href="#1-从GitHub获取源码" class="headerlink" title="1.从GitHub获取源码"></a>1.从GitHub获取源码</h4><p><code>git clone --recursive https://github.com/apache/tvm tvm</code>。利用<code>--recursive</code>选项把子模块也进行克隆<br><img src="/2022/07/28/TVM%E5%9C%A8Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/2022-07-28-17-09-05.png" alt="tvm"></p><h4 id="2-构建Conda环境"><a href="#2-构建Conda环境" class="headerlink" title="2.构建Conda环境"></a>2.构建Conda环境</h4><p>在<code>./tvm/conda/</code>文件夹下有一个<code>build-environment.yaml</code>文件，利用它可以直接构建出安装tvm需要的前置环境。<br><img src="/2022/07/28/TVM%E5%9C%A8Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/2022-07-28-17-19-02.png" alt="build-environment.yaml"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Create a conda environment with the dependencies specified by the yaml</span><br>conda env create --file conda/build-environment.yaml<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Activate the created environment</span><br>conda activate tvm-build<br></code></pre></td></tr></table></figure><p>注意python版本,3.9.X以上版本的python是不被支持的。<br>接着就是在conda环境中安装tvm了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda build --output-folder=conda/pkg  conda/recipe<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Run conda/build_cuda.sh to build with cuda enabled</span><br>conda install tvm -c ./conda/pkg<br></code></pre></td></tr></table></figure><p>正常进行到这里的话，tvm-build环境中已经有tvm了，可以进行测试<br><img src="/2022/07/28/TVM%E5%9C%A8Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/2022-07-28-17-24-31.png" alt="result"></p><h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h4><p>利用conda环境来安装tvm还是相对容易的，毕竟conda的包管理确实好，而且tvm也支持直接利用conda来安装。</p>]]></content>
    
    
    
    <tags>
      
      <tag>TVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2207-重拾博客</title>
    <link href="/2022/07/14/%E9%87%8D%E6%8B%BE%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/07/14/%E9%87%8D%E6%8B%BE%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>重新搭建了个人博客</p><span id="more"></span><h2 id="0-记录下重新搭建博客的过程"><a href="#0-记录下重新搭建博客的过程" class="headerlink" title="0 记录下重新搭建博客的过程"></a>0 记录下重新搭建博客的过程</h2><p>之前在大二上《数据结构》的时候，接触了云服务器，觉得挺有意思的，后面自己在腾讯云用学生优惠整了台云服务器，现在已经到期了一段时间了。期间写了一点东西，不过大多都是没有什么技术含量的东西，以转载居多。本来觉得写博客好麻烦，再一开始的新鲜感过去之后，就不太提得起劲来写东西了。但是最近看到实验室的同学和师兄都有写博客记录的习惯，而且十分认真地对待这件事，尤其今天看了实验室毕业出去的<a href="https://jcf94.com/">颊神的博客</a>后，重新认识到了写博客这件事的意义，所以现在准备把这件事情重新捡起来。</p><h2 id="1-原先的博客情况"><a href="#1-原先的博客情况" class="headerlink" title="1 原先的博客情况"></a>1 原先的博客情况</h2><p>原来因为不想瞎折腾，所以博客系统选择了非常易于使用的<a href="https://halo.run/">Halo</a>, 它的操作真的很简单了，直接全图形化界面管理，不同整什么命令，有点傻瓜式，也比较适合我hhh。</p><h2 id="2-Hexo博客"><a href="#2-Hexo博客" class="headerlink" title="2 Hexo博客"></a>2 Hexo博客</h2><p>当时也看到了大名鼎鼎的<a href="https://hexo.io/zh-cn/">Hexo</a>博客，但是碍于当时觉得上手不如Halo那么简单，自己也对于命令行不是特别感冒<del>(其实就是菜，怕折腾)</del>，所以没有选择。现在看师兄和同学都用的Hexo，我就借鉴<del>（抄)</del>一下，也用这个博客系统了。</p><h3 id="2-1-搭建博客过程中遇到的问题"><a href="#2-1-搭建博客过程中遇到的问题" class="headerlink" title="2.1 搭建博客过程中遇到的问题"></a>2.1 搭建博客过程中遇到的问题</h3><p>在github建仓库啥的都没有什么问题，唯一出现问题的几个地方是在利用<code>hexo deploy</code>部署到github仓库的时候，访问超时，网上搜了发现是使用的代理的原因。使用命令<code>git config --global http.proxy 127.0.0.1:(vpn代理端口号）</code>将代理端口改为和翻墙软件一致就可以解决这个问题。<br>个人觉得利用github来搭建个人网站除了访问有点慢以外，还是挺不错的，毕竟也不收费，还要啥自行车。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
